generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  userId String @map("user_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  expires      DateTime
  userId       String   @map("user_id") @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  username       String?
  bio            String?
  website        String?
  gender         String?
  email          String?     @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime    @default(now()) @map(name: "created_at")
  updatedAt      DateTime    @updatedAt @map(name: "updated_at")
  posts          Post[]
  saved          SavedPost[]
  likes          Like[]
  comments       Comment[]
  followedBy     Follows[]   @relation("following")
  following      Follows[]   @relation("follower")
  accounts       Account[]
  sessions       Session[]
}

model Follows {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  followerId String @db.ObjectId
  follower   User   @relation("follower", fields: [followerId], references: [id])

  followingId String @db.ObjectId
  following   User   @relation("following", fields: [followingId], references: [id])
}

model Post {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  caption   String?
  fileUrl   String
  likes     Like[]
  savedBy   SavedPost[]
  comments  Comment[]
  userId    String      @map("user_id") @db.ObjectId
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SavedPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @db.ObjectId

  userId String @map("user_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([userId])
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @db.ObjectId

  userId String @map("user_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body      String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @db.ObjectId

  userId String @map("user_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
}
